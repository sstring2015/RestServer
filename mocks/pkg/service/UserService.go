// Code generated by mockery v2.29.0. DO NOT EDIT.

package service

import (
	models "github.com/RestServer/pkg/models"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "github.com/RestServer/pkg/utils"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// DeleteByCarId provides a mock function with given fields: id
func (_m *UserService) DeleteByCarId(id primitive.ObjectID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCars provides a mock function with given fields: data
func (_m *UserService) GetAllCars(data utils.Pagination) ([]models.Car, int64, error) {
	ret := _m.Called(data)

	var r0 []models.Car
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(utils.Pagination) ([]models.Car, int64, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(utils.Pagination) []models.Car); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.Pagination) int64); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(utils.Pagination) error); ok {
		r2 = rf(data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCarByID provides a mock function with given fields: id
func (_m *UserService) GetCarByID(id primitive.ObjectID) (models.Car, error) {
	ret := _m.Called(id)

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (models.Car, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) models.Car); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCar provides a mock function with given fields: data
func (_m *UserService) InsertCar(data models.Car) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Car) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignIn provides a mock function with given fields: email
func (_m *UserService) SignIn(email string) (models.User, error) {
	ret := _m.Called(email)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: data
func (_m *UserService) SignUp(data models.User) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCarByID provides a mock function with given fields: data, id
func (_m *UserService) UpdateCarByID(data models.Car, id primitive.ObjectID) error {
	ret := _m.Called(data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Car, primitive.ObjectID) error); ok {
		r0 = rf(data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
