// Code generated by mockery v2.29.0. DO NOT EDIT.

package store

import (
	models "github.com/RestServer/pkg/models"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "github.com/RestServer/pkg/utils"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeleteByCarID provides a mock function with given fields: filter
func (_m *Store) DeleteByCarID(filter primitive.M) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.M) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCars provides a mock function with given fields: pagination
func (_m *Store) GetAllCars(pagination utils.Pagination) ([]models.Car, int64, error) {
	ret := _m.Called(pagination)

	var r0 []models.Car
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(utils.Pagination) ([]models.Car, int64, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(utils.Pagination) []models.Car); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.Pagination) int64); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(utils.Pagination) error); ok {
		r2 = rf(pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCarByID provides a mock function with given fields: filter
func (_m *Store) GetCarByID(filter primitive.M) (models.Car, error) {
	ret := _m.Called(filter)

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.Car, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.Car); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarByModelBrand provides a mock function with given fields: filter
func (_m *Store) GetCarByModelBrand(filter primitive.M) (models.Car, error) {
	ret := _m.Called(filter)

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.Car, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.Car); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: filter
func (_m *Store) GetUserByEmail(filter primitive.M) (models.User, error) {
	ret := _m.Called(filter)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.User, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.User); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCar provides a mock function with given fields: data
func (_m *Store) InsertCar(data models.Car) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Car) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: data
func (_m *Store) InsertUser(data models.User) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCarByID provides a mock function with given fields: filter, updater
func (_m *Store) UpdateCarByID(filter primitive.M, updater primitive.M) error {
	ret := _m.Called(filter, updater)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.M, primitive.M) error); ok {
		r0 = rf(filter, updater)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
